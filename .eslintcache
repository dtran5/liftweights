[{"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\index.js":"1","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\App.js":"2","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Navigation\\MainNavigation.js":"3","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Navigation\\NavigationLinks.js":"4","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Days\\WorkoutDays.js":"5","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Days\\WorkoutDay.js":"6","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Days\\RenderEachExercise.js":"7","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Calendar\\Calendar.js":"8","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Forms\\RecordWorkout.js":"9","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Forms\\Login.js":"10","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Forms\\Signup.js":"11","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\contexts\\AuthContext.js":"12","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\firebase.js":"13","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Dashboard\\Dashboard.js":"14","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Routes\\PrivateRoutes.js":"15","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Forms\\ForgotPassword.js":"16","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Profile\\UpdateProfile.js":"17","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Forms\\ClientList.js":"18","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Days\\RenderEachClient.js":"19","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Days\\ClientWorkout.js":"20","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Days\\RenderClientExercise.js":"21"},{"size":198,"mtime":1611950816827,"results":"22","hashOfConfig":"23"},{"size":2058,"mtime":1614134718841,"results":"24","hashOfConfig":"23"},{"size":730,"mtime":1614133774216,"results":"25","hashOfConfig":"23"},{"size":1846,"mtime":1614135182292,"results":"26","hashOfConfig":"23"},{"size":611,"mtime":1613779260691,"results":"27","hashOfConfig":"23"},{"size":1819,"mtime":1612991457240,"results":"28","hashOfConfig":"23"},{"size":1500,"mtime":1614048831706,"results":"29","hashOfConfig":"23"},{"size":7855,"mtime":1614135092851,"results":"30","hashOfConfig":"23"},{"size":7416,"mtime":1614199160697,"results":"31","hashOfConfig":"23"},{"size":3222,"mtime":1614123437690,"results":"32","hashOfConfig":"23"},{"size":5588,"mtime":1614114298035,"results":"33","hashOfConfig":"23"},{"size":8037,"mtime":1614207500785,"results":"34","hashOfConfig":"23"},{"size":673,"mtime":1612918083211,"results":"35","hashOfConfig":"23"},{"size":1972,"mtime":1614135118307,"results":"36","hashOfConfig":"23"},{"size":1021,"mtime":1612385138794,"results":"37","hashOfConfig":"23"},{"size":3047,"mtime":1612385532019,"results":"38","hashOfConfig":"23"},{"size":5912,"mtime":1613781561054,"results":"39","hashOfConfig":"23"},{"size":3201,"mtime":1613781471075,"results":"40","hashOfConfig":"23"},{"size":1378,"mtime":1613781403764,"results":"41","hashOfConfig":"23"},{"size":3695,"mtime":1614211515955,"results":"42","hashOfConfig":"23"},{"size":843,"mtime":1614211518513,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"ov5d02",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\index.js",[],["91","92"],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\App.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Navigation\\MainNavigation.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Navigation\\NavigationLinks.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Days\\WorkoutDays.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Days\\WorkoutDay.js",[],["93","94"],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Days\\RenderEachExercise.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Calendar\\Calendar.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Forms\\RecordWorkout.js",["95"],"import React, { useState, useRef, useEffect } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { Form, Button, Table, Container } from 'react-bootstrap';\r\nimport { db } from '../../firebase';\r\nimport { useAuth } from '../../contexts/AuthContext'\r\nimport RenderEachExercise from '../Days/RenderEachExercise';\r\n\r\n\r\n\r\nconst RecordWorkout = () => {\r\n    \r\n    const emailOfClient = useParams().email\r\n    // const [clientTrainerEmail, setClientTrainerEmail] = useState('')\r\n    const [exerciseList, setExerciseList] = useState([])\r\n    //grab the date from URL and use it as document name in database\r\n    const date = useParams().date;\r\n    //grab unique id created from database authentication\r\n    const { currentUser: { uid, email }, trainerTypeState }  = useAuth()\r\n    const nameRef = useRef();\r\n    const setsRef = useRef()\r\n    const repsRef = useRef()\r\n    const weightRef = useRef()\r\n    \r\n    async function handleSubmit (e) {\r\n        e.preventDefault()\r\n\r\n        \r\n        //MAKE THIS EMAIL OF THE CLIENT\r\n        //REWORK THIS DB TO FIT YOUR STRUCTURE\r\n        //REMOVE CLIENT ABILITY TO CREATE WORKOUT\r\n        //SET AN EMAIL VERIFICATION FOR CLIENT (IF CLIENT.EMAIL MATCHES EMAIL OF THE DOCUMENT, ALLOW VIEWING OF DOCUMENT)\r\n        //Sets trainer's currently worked on client's email to each date so it can be verified later\r\n        await \r\n        db.collection(\"trainers\")\r\n            .doc(email)\r\n            .collection(\"trainer-clients\")\r\n            .doc(emailOfClient)\r\n            .collection(\"dates\")\r\n            .doc(date)\r\n            .collection(\"exercise-details\")\r\n            .doc()\r\n            .set({\r\n                name: nameRef.current.value,\r\n                sets: setsRef.current.value,\r\n                reps: repsRef.current.value,\r\n                weight: weightRef.current.value,\r\n                //email is passed as a verification check when client tries to grab data\r\n                email: emailOfClient\r\n            }).then(()=>{\r\n                console.log('worked');\r\n                \r\n            }).catch(()=>{\r\n                console.log('did not work');\r\n            })\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        function getExerciseDetails() {\r\n            db.collection(\"trainers\")\r\n                .doc(email)\r\n                .collection(\"trainer-clients\")\r\n                .doc(emailOfClient)\r\n                .collection(\"dates\")\r\n                .doc(date)\r\n                .collection(\"exercise-details\")\r\n                .onSnapshot(handleTrainerSnapshot)\r\n        }\r\n\r\n        getExerciseDetails()\r\n\r\n    }, [date, uid, emailOfClient])\r\n\r\n    //onSnapshot is an active listener that listens for changes to the collection so when user adds new exercise, it is immediately fetched and displayed\r\n    //onSnapshot returns a callback for us to work on given documents\r\n    \r\n\r\n    //within the callback that onSnapshot provides, we are passed a snapshot of our data. It contains the documents in the collection. map through our docs array to return our data\r\n    //exercise.id grabs the id of the document of the individual exercise and then exercise.data() opens the document and retrieves its contents\r\n    function handleTrainerSnapshot(snapshot) {\r\n        const exerciseList = snapshot.docs.map((exercise) => {\r\n            return { id: exercise.id, ...exercise.data() }\r\n        })\r\n        setExerciseList(exerciseList)\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            {\r\n                (trainerTypeState)\r\n                ?  <Link to={`/client/${emailOfClient}`}>Back</Link>\r\n                :  <Link to={`/${emailOfClient}`}>Back</Link>\r\n            }\r\n            {\r\n                (trainerTypeState)\r\n                ?   <Container className=\"d-flex justify-content-center align-items-center\">\r\n                        <Form onSubmit={handleSubmit} className=\"container mt-5 w-50 mr-5\">\r\n                            <Form.Group controlId=\"exercise\">\r\n                                <Form.Label>Exercise</Form.Label>\r\n                                <Form.Control ref={nameRef} type=\"text\" placeholder=\"Exercise Name\" />\r\n                                <Form.Text className=\"text-muted\">\r\n                                \r\n                                </Form.Text>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId=\"sets\">\r\n                                <Form.Label>Sets</Form.Label>\r\n                                <Form.Control ref={setsRef} type=\"text\" placeholder=\"How many sets?\" />\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"reps\">\r\n                                <Form.Label>Reps</Form.Label>\r\n                                <Form.Control ref={repsRef} type=\"text\" placeholder=\"How many reps per set?\" />\r\n                                <Form.Text className=\"text-muted\">\r\n                                \r\n                                </Form.Text>\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"weight\">\r\n                                <Form.Label>Weight</Form.Label>\r\n                                <Form.Control ref={weightRef} type=\"text\" placeholder=\"Suggested starting weight\" />\r\n                                <Form.Text className=\"text-muted\">\r\n                                \r\n                                </Form.Text>\r\n                            </Form.Group>\r\n                            <Button variant=\"primary\" type=\"submit\">\r\n                                Submit\r\n                            </Button>\r\n                        </Form>\r\n                        <Table striped bordered hover className=\"w-50\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Exercise</th>\r\n                                    <th>Sets</th>\r\n                                    <th>Reps</th>\r\n                                    <th>Weight</th>\r\n                                    <th>Delete</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {exerciseList.map((exercise) => (\r\n                                <RenderEachExercise key={exercise.id} exercise={exercise} /> \r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    </Container>\r\n                : \r\n                <Container className=\"d-flex justify-content-center align-items-center\">\r\n                    <Table striped bordered hover className=\"w-50\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Exercise</th>\r\n                                <th>Sets</th>\r\n                                <th>Reps</th>\r\n                                <th>Weight</th>\r\n                                <th>Delete</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {exerciseList.map((exercise) => (\r\n                            <RenderEachExercise key={exercise.id} exercise={exercise} /> \r\n                            ))}\r\n                        </tbody>\r\n                    </Table>\r\n                </Container>\r\n            }\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default RecordWorkout","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Forms\\Login.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Forms\\Signup.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\contexts\\AuthContext.js",["96"],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\firebase.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Dashboard\\Dashboard.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Routes\\PrivateRoutes.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Forms\\ForgotPassword.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Profile\\UpdateProfile.js",["97"],"import React, { useRef, useState } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { Card, Form, Button, Alert, Container } from 'react-bootstrap'\r\n//this is our way to use our context that we created in AuthContext\r\nimport { useAuth } from '../../contexts/AuthContext'\r\nimport { auth } from '../../firebase';\r\n\r\nfunction UpdateProfile() {\r\n    const nameRef = useRef()\r\n    const [name, setName] = useState('')\r\n    const emailRef = useRef();\r\n    const passwordRef = useRef();\r\n    const passwordConfirmRef = useRef();\r\n    const { currentUser, updateEmail, updatePassword } = useAuth();\r\n    const [error, setError] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const history = useHistory();\r\n\r\n    //this is an async function - had to check passwords and get back to us\r\n    function handleSubmit(e) {\r\n        const user = auth.currentUser\r\n\r\n        \r\n        e.preventDefault()\r\n\r\n        if (passwordRef.current.value !== passwordConfirmRef.current.value) {\r\n            //we return here because we want to immediately exit the function and not keep going\r\n            //if there is an error\r\n            return setError('Passwords do not match')\r\n        }\r\n\r\n        const promises = []\r\n        setLoading(true)\r\n        setError(\"\")\r\n\r\n        //name change works but doesnt rerender correctly in header when changed\r\n        //needs to be fixed\r\n        if(nameRef.current.value !== currentUser.displayName) {\r\n            user.updateProfile({\r\n                displayName: nameRef.current.value\r\n            }).then(() => {\r\n                setName(nameRef.current.value)\r\n                console.log('Name changed');\r\n            }).catch(()=>{\r\n                console.error('Name change failed')\r\n            })\r\n        }     \r\n\r\n        //if updated email doesnt equal current email, then call updateemail function and pass it the new updated email\r\n        if (emailRef.current.value !== currentUser.email) {\r\n            promises.push(updateEmail(emailRef.current.value))\r\n        }\r\n\r\n        if(passwordRef.current.value) {\r\n            promises.push(updatePassword(passwordRef.current.value))\r\n        }   \r\n\r\n        //As soon as all of our above promises finish, we run a .then if they are all successful\r\n        //takes in our array of promises\r\n        Promise.all(promises).then(() => {\r\n            history.push('/')\r\n        }).catch(() => {\r\n            setError('Failed to update account')\r\n        }).finally(() => {\r\n            setLoading(false)\r\n        })\r\n\r\n        //if its successful it will - set error to empty and set a loading state which will\r\n        //disable the submit button so users dont keep clicking and signing up\r\n    \r\n    } \r\n\r\n    //if we are currently loading, dont want to be able to resubmit form!\r\n    return (\r\n        <>\r\n            <Container\r\n                className=\"d-flex align-items-center justify-content-center\"\r\n                style={{ minHeight: \"100vh\" }}\r\n            >   \r\n                <div className=\"w-100\" style={{ maxWidth: \"400px\" }}>\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <h2 className=\"text-center mb-4\">Update Profile</h2>\r\n                            {error && <Alert variant=\"danger\">{error}</Alert>}\r\n                            <Form onSubmit={handleSubmit}>\r\n                            <Form.Group id=\"name\">\r\n                                    <Form.Label>Full Name</Form.Label>\r\n                                    <Form.Control \r\n                                        type=\"text\" \r\n                                        ref={nameRef} \r\n                                        placeholder=\"Make this functional\"\r\n                                        required defaultValue={currentUser.displayName}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group id=\"email\">\r\n                                    <Form.Label>Email</Form.Label>\r\n                                    <Form.Control \r\n                                        type=\"email\" \r\n                                        ref={emailRef} \r\n                                        required defaultValue={currentUser.email} \r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group id=\"password\">\r\n                                    <Form.Label>Password</Form.Label>\r\n                                    <Form.Control \r\n                                        type=\"password\" \r\n                                        ref={passwordRef} \r\n                                        placeholder=\"Leave blank to keep the same\" \r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group id=\"password-confirm\">\r\n                                    <Form.Label>Confirm Password</Form.Label>\r\n                                    <Form.Control \r\n                                        type=\"password\" \r\n                                        ref={passwordConfirmRef} \r\n                                        placeholder=\"Leave blank to keep the same\"\r\n                                    />\r\n                                </Form.Group>\r\n                                <Button disabled={loading} className=\"w-100\" type=\"submit\">\r\n                                    Update\r\n                                </Button>\r\n                            </Form>\r\n                        </Card.Body>\r\n                    </Card>\r\n                    <div className=\"w-100 text-center mt-2\">\r\n                        <Link to=\"/\">Cancel</Link>\r\n                    </div>\r\n                </div>\r\n                \r\n            </Container>\r\n            \r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default UpdateProfile\r\n","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Forms\\ClientList.js",["98"],"import React, { useEffect, useRef, useState } from 'react'\r\nimport { Container, Button, Row, Col, Form } from 'react-bootstrap'\r\nimport { db } from '../../firebase'\r\nimport { useAuth } from '../../contexts/AuthContext'\r\nimport RenderEachClient from '../Days/RenderEachClient'\r\n\r\nfunction ClientList() {\r\n    const [loading, setLoading] = useState(false)\r\n    const nameRef = useRef()\r\n    const emailRef = useRef()\r\n    const { currentUser: { uid } } = useAuth()\r\n    const [clientList, setClientList] = useState([])\r\n\r\n    async function handleSubmit(e) {\r\n        e.preventDefault()\r\n        setLoading(true)\r\n\r\n        await \r\n            db\r\n            .collection('trainers')\r\n            .doc(uid)\r\n            .collection('trainer-clients')\r\n            .doc(emailRef.current.value)\r\n            .set({\r\n                name: nameRef.current.value,\r\n                email: emailRef.current.value\r\n            }).then(() => {\r\n                console.log('Added new client');\r\n            }).catch(() => {\r\n                console.log('Client failed to add')\r\n            })\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        function getClients() {\r\n            db\r\n            .collection('trainers')\r\n            .doc(uid)\r\n            .collection('trainer-clients')\r\n            .onSnapshot(handleSnapshot)\r\n        }\r\n\r\n        getClients()\r\n    }, [clientList, uid])\r\n\r\n    \r\n\r\n    function handleSnapshot(snapshot) {\r\n        const clientList = snapshot.docs.map((client) => {\r\n            return { id: client.id, ...client.data() }\r\n        })\r\n\r\n        setClientList(clientList)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                \r\n            </div>\r\n            <Container\r\n                className=\"d-flex justify-content-center align-items-center mt-3\"\r\n                style={{ minHeight: \"75vh\" }}\r\n            >\r\n                <Row className=\"text-center\">\r\n                <Col className=\"d-flex flex-column align-items-center\" xs={12} sm={6}>\r\n                        <h3>New client?</h3>\r\n                        <Form onSubmit={handleSubmit}>\r\n                            <Form.Group id=\"name\">\r\n                                <Form.Label>Name</Form.Label>\r\n                                <Form.Control type=\"text\" ref={nameRef} required />\r\n                            </Form.Group>\r\n                            <Form.Group id=\"email\">\r\n                                <Form.Label>Email</Form.Label>\r\n                                <Form.Control type=\"email\" ref={emailRef} required />\r\n                            </Form.Group>\r\n                            <Button type=\"submit\">Add to list</Button>\r\n                        </Form>\r\n                    </Col>\r\n                    <Col className=\"d-flex flex-column align-items-center mt-3\" xs={12} sm={6}>\r\n                        {clientList.map((client) => (\r\n                            <RenderEachClient key={client.id} client={client} />\r\n                        ))}\r\n                        <Button className=\"w-50 mt-5\">View Workouts</Button>\r\n                    </Col>\r\n                </Row>\r\n                \r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ClientList\r\n","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Days\\RenderEachClient.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Days\\ClientWorkout.js",["99","100","101","102"],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Days\\RenderClientExercise.js",["103","104","105","106","107"],{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"108","replacedBy":"112"},{"ruleId":"110","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":72,"column":8,"nodeType":"116","endLine":72,"endColumn":34,"suggestions":"117"},{"ruleId":"118","severity":1,"message":"119","line":28,"column":19,"nodeType":"120","messageId":"121","endLine":28,"endColumn":27},{"ruleId":"118","severity":1,"message":"122","line":10,"column":12,"nodeType":"120","messageId":"121","endLine":10,"endColumn":16},{"ruleId":"118","severity":1,"message":"123","line":8,"column":12,"nodeType":"120","messageId":"121","endLine":8,"endColumn":19},{"ruleId":"118","severity":1,"message":"124","line":7,"column":8,"nodeType":"120","messageId":"121","endLine":7,"endColumn":26},{"ruleId":"118","severity":1,"message":"125","line":13,"column":12,"nodeType":"120","messageId":"121","endLine":13,"endColumn":25},{"ruleId":"118","severity":1,"message":"126","line":13,"column":27,"nodeType":"120","messageId":"121","endLine":13,"endColumn":43},{"ruleId":"118","severity":1,"message":"127","line":14,"column":28,"nodeType":"120","messageId":"121","endLine":14,"endColumn":31},{"ruleId":"118","severity":1,"message":"128","line":3,"column":10,"nodeType":"120","messageId":"121","endLine":3,"endColumn":12},{"ruleId":"118","severity":1,"message":"129","line":5,"column":10,"nodeType":"120","messageId":"121","endLine":5,"endColumn":16},{"ruleId":"118","severity":1,"message":"130","line":9,"column":11,"nodeType":"120","messageId":"121","endLine":9,"endColumn":24},{"ruleId":"118","severity":1,"message":"127","line":10,"column":28,"nodeType":"120","messageId":"121","endLine":10,"endColumn":31},{"ruleId":"118","severity":1,"message":"131","line":11,"column":11,"nodeType":"120","messageId":"121","endLine":11,"endColumn":15},"no-native-reassign",["132"],"no-negated-in-lhs",["133"],["132"],["133"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'email'. Either include it or remove the dependency array.","ArrayExpression",["134"],"no-unused-vars","'setEmail' is assigned a value but never used.","Identifier","unusedVar","'name' is assigned a value but never used.","'loading' is assigned a value but never used.","'RenderEachExercise' is defined but never used.","'clientTrainer' is assigned a value but never used.","'setClientTrainer' is assigned a value but never used.","'uid' is assigned a value but never used.","'db' is defined but never used.","'Button' is defined but never used.","'emailOfClient' is assigned a value but never used.","'date' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"135","fix":"136"},"Update the dependencies array to be: [date, uid, emailOfClient, email]",{"range":"137","text":"138"},[2600,2626],"[date, uid, emailOfClient, email]"]