[{"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\index.js":"1","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\App.js":"2","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Navigation\\MainNavigation.js":"3","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Navigation\\NavigationLinks.js":"4","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Days\\WorkoutDays.js":"5","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Days\\WorkoutDay.js":"6","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Days\\RenderEachExercise.js":"7","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Calendar\\Calendar.js":"8","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Forms\\RecordWorkout.js":"9","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Forms\\Login.js":"10","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Forms\\Signup.js":"11","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\contexts\\AuthContext.js":"12","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\firebase.js":"13","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Dashboard\\Dashboard.js":"14","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Routes\\PrivateRoutes.js":"15","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Forms\\ForgotPassword.js":"16","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Profile\\UpdateProfile.js":"17","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Forms\\ClientList.js":"18","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Days\\RenderEachClient.js":"19"},{"size":198,"mtime":1611950816827,"results":"20","hashOfConfig":"21"},{"size":1857,"mtime":1613779557988,"results":"22","hashOfConfig":"21"},{"size":730,"mtime":1613606310429,"results":"23","hashOfConfig":"21"},{"size":2432,"mtime":1613771254227,"results":"24","hashOfConfig":"21"},{"size":611,"mtime":1613779260691,"results":"25","hashOfConfig":"21"},{"size":1819,"mtime":1612991457240,"results":"26","hashOfConfig":"21"},{"size":1656,"mtime":1613521245617,"results":"27","hashOfConfig":"21"},{"size":6359,"mtime":1611872047789,"results":"28","hashOfConfig":"21"},{"size":4759,"mtime":1613691844704,"results":"29","hashOfConfig":"21"},{"size":3245,"mtime":1613610367494,"results":"30","hashOfConfig":"21"},{"size":4787,"mtime":1613779254394,"results":"31","hashOfConfig":"21"},{"size":5010,"mtime":1613760274938,"results":"32","hashOfConfig":"21"},{"size":673,"mtime":1612918083211,"results":"33","hashOfConfig":"21"},{"size":2819,"mtime":1613771339184,"results":"34","hashOfConfig":"21"},{"size":1021,"mtime":1612385138794,"results":"35","hashOfConfig":"21"},{"size":3047,"mtime":1612385532019,"results":"36","hashOfConfig":"21"},{"size":5924,"mtime":1613771631453,"results":"37","hashOfConfig":"21"},{"size":3318,"mtime":1613778078149,"results":"38","hashOfConfig":"21"},{"size":1473,"mtime":1613779727244,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"ov5d02",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"42"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\index.js",[],["87","88"],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\App.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Navigation\\MainNavigation.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Navigation\\NavigationLinks.js",["89"],"import React, { useState, useEffect } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\nimport { useAuth } from '../../contexts/AuthContext'\r\nimport { db } from '../../firebase'\r\n\r\n\r\nconst NavigationLinks = () => {\r\n\r\n    const { logout, currentUser } = useAuth()\r\n    const [userType, setUserType] = useState(\"\")\r\n    //Using React Router NavLink component to link to different pages\r\n    //Styling using bootstrap classes\r\n\r\n    const activeLinkColor = '#ffdf00'\r\n\r\n    async function getUserType(currentUser) {\r\n        if (currentUser) {\r\n            //reference our doc\r\n            const trainerRef = await db.collection('trainers').doc(currentUser.uid).get();\r\n            //open our doc and read, doesnt assign trainer a value until the promise is returned\r\n            const trainer = await trainerRef.data();\r\n\r\n            const clientRef = await db.collection('users').doc(currentUser.uid).get();\r\n            const client = clientRef.data();\r\n\r\n            if (currentUser && trainer) {\r\n                setUserType(\"Trainer\")\r\n            }\r\n\r\n            if (currentUser && client) {\r\n                setUserType(\"Client\")\r\n            }\r\n        }\r\n        \r\n    }\r\n    \r\n    getUserType(currentUser)\r\n\r\n    return (\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"ml-auto\">\r\n                    {currentUser && (userType === \"Trainer\")\r\n                    ? <NavLink activeStyle={{ color: activeLinkColor }} className=\"nav-link\" to='/clients'>Client Workouts</NavLink>\r\n                    : <NavLink activeStyle={{ color: activeLinkColor }} className=\"nav-link\" to='/workouts'>Workouts</NavLink>\r\n                    }\r\n                    \r\n                    \r\n                    { \r\n                        currentUser \r\n                        ?   <NavLink \r\n                                activeStyle={{ color: activeLinkColor }} \r\n                                className=\"nav-link\" to='/login'\r\n                                onClick={() => logout()}\r\n                            >\r\n                                Logout\r\n                            </NavLink> \r\n                        :   <NavLink activeStyle={{ color: activeLinkColor }} className=\"nav-link\" to='/login'>Login</NavLink>\r\n                    }\r\n                </Nav>\r\n        </Navbar.Collapse>\r\n    )\r\n}\r\n\r\nexport default NavigationLinks","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Days\\WorkoutDays.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Days\\WorkoutDay.js",[],["90","91"],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Days\\RenderEachExercise.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Calendar\\Calendar.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Forms\\RecordWorkout.js",["92"],"import React, { useState, useRef, useEffect } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { db } from '../../firebase';\r\nimport { useAuth } from '../../contexts/AuthContext'\r\nimport RenderEachExercise from '../Days/RenderEachExercise';\r\n\r\n\r\n\r\nconst RecordWorkout = () => {\r\n    const [loading, setLoading] = useState(false)\r\n    const [exerciseList, setExerciseList] = useState([])\r\n    //grab the date from URL and use it as document name in database\r\n    const date = useParams().date;\r\n    //grab unique id created from database authentication\r\n    const { currentUser: { uid, email } }  = useAuth()\r\n    const nameRef = useRef();\r\n    const setsRef = useRef()\r\n    const repsRef = useRef()\r\n    const weightRef = useRef()\r\n\r\n   \r\n\r\n    async function handleSubmit (e) {\r\n        e.preventDefault()\r\n        setLoading(true)\r\n        \r\n        //MAKE THIS EMAIL OF THE CLIENT\r\n        //Sets trainer's currently worked on client's email to each date so it can be verified later\r\n        await \r\n        db.collection(\"users\")\r\n            .doc(uid)\r\n            .collection(\"dates\")\r\n            .doc(date)\r\n            .set({\r\n                email: email\r\n        })\r\n\r\n        await \r\n        db.collection(\"users\")\r\n          .doc(uid)\r\n          .collection(\"dates\")\r\n          .doc(date)\r\n          .collection(\"exercise-details\")\r\n          .doc()\r\n          .set({\r\n            name: nameRef.current.value,\r\n            sets: setsRef.current.value,\r\n            reps: repsRef.current.value,\r\n            weight: weightRef.current.value\r\n        }).then(()=>{\r\n            console.log('worked');\r\n            \r\n        }).catch(()=>{\r\n            console.log('did not work');\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        function getExerciseDetails() {\r\n            db.collection('users')\r\n              .doc(uid)\r\n              .collection(\"dates\")\r\n              .doc(date)\r\n              .collection('exercise-details')\r\n              .onSnapshot(handleSnapshot)\r\n        }\r\n\r\n        getExerciseDetails()\r\n    }, [date, uid])\r\n\r\n    //onSnapshot is an active listener that listens for changes to the collection so when user adds new exercise, it is immediately fetched and displayed\r\n    //onSnapshot returns a callback for us to work on given documents\r\n    \r\n\r\n    //within the callback that onSnapshot provides, we are passed a snapshot of our data. It contains the documents in the collection. map through our docs array to return our data\r\n    //exercise.id grabs the id of the document of the individual exercise and then exercise.data() opens the document and retrieves its contents\r\n    function handleSnapshot(snapshot) {\r\n        const exerciseList = snapshot.docs.map((exercise) => {\r\n            return { id: exercise.id, ...exercise.data() }\r\n        })\r\n        setExerciseList(exerciseList)\r\n       \r\n        \r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <div>\r\n                {exerciseList.map((exercise) => (\r\n                   <RenderEachExercise key={exercise.id} exercise={exercise} /> \r\n                ))}\r\n            </div>  \r\n            <Link to={'/workouts'}>Back</Link>\r\n            {}\r\n            <Form onSubmit={handleSubmit} className=\"container mt-5\">\r\n                <Form.Group controlId=\"exercise\">\r\n                    <Form.Label>Exercise</Form.Label>\r\n                    <Form.Control ref={nameRef} type=\"text\" placeholder=\"Exercise Name\" />\r\n                    <Form.Text className=\"text-muted\">\r\n                    \r\n                    </Form.Text>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"sets\">\r\n                    <Form.Label>Sets</Form.Label>\r\n                    <Form.Control ref={setsRef} type=\"text\" placeholder=\"How many sets did you do?\" />\r\n                </Form.Group>\r\n                <Form.Group controlId=\"reps\">\r\n                    <Form.Label>Reps</Form.Label>\r\n                    <Form.Control ref={repsRef} type=\"text\" placeholder=\"How many reps per set?\" />\r\n                    <Form.Text className=\"text-muted\">\r\n                    \r\n                    </Form.Text>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"weight\">\r\n                    <Form.Label>Weight</Form.Label>\r\n                    <Form.Control ref={weightRef} type=\"text\" placeholder=\"How much gravity did you fight?\" />\r\n                    <Form.Text className=\"text-muted\">\r\n                    \r\n                    </Form.Text>\r\n                </Form.Group>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                    Submit\r\n                </Button>\r\n            </Form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RecordWorkout","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Forms\\Login.js",["93"],"import React, { useRef, useState, useContext } from 'react';\r\nimport{ Link, useHistory } from 'react-router-dom';\r\nimport { Container, Card, Form, Button, Alert } from 'react-bootstrap'\r\n//this is our way to use our context that we created in AuthContext\r\nimport { useAuth } from '../../contexts/AuthContext';\r\n\r\n\r\n\r\n\r\nfunction Login() {\r\n    \r\n    const emailRef = useRef()\r\n    const passwordRef = useRef()\r\n    const history = useHistory()\r\n    \r\n    const { login } = useAuth()\r\n    const [error, setError] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    //this is an async function - had to check passwords and get back to us\r\n    async function handleSubmit(e) {\r\n        e.preventDefault()\r\n\r\n        //if its successful it will - set error to empty and set a loading state which will\r\n        //disable the submit button so users dont keep clicking and signing up\r\n        try {\r\n            setError('')\r\n            setLoading(true)\r\n            await login(emailRef.current.value, passwordRef.current.value)\r\n           \r\n            history.push('/')\r\n        } catch {\r\n            setError('Failed to log in to your account')\r\n        }\r\n        //after everything is done, setloading back to false - this is done after it is done\r\n        //awaiting the signup function\r\n        setLoading(false)\r\n    } \r\n\r\n    //if we are currently loading, dont want to be able to resubmit form!\r\n    return (\r\n        <>\r\n            <Container \r\n                className=\"d-flex align-items-center justify-content-center\"\r\n                style={{ minHeight: \"100vh\" }}\r\n            >\r\n                <div className=\"w-100\" style={{ maxWidth: \"400px\" }}>\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <h2 className=\"text-center mb-4\">Login</h2>\r\n                            {error && <Alert variant=\"danger\">{error}</Alert>}\r\n                            <Form onSubmit={handleSubmit}>\r\n                                <Form.Group id=\"email\">\r\n                                    <Form.Label>Email</Form.Label>\r\n                                    <Form.Control type=\"email\" ref={emailRef} required />\r\n                                </Form.Group>\r\n                                <Form.Group id=\"password\">\r\n                                    <Form.Label>Password</Form.Label>\r\n                                    <Form.Control type=\"password\" ref={passwordRef} required />\r\n                                </Form.Group>\r\n                                <Button disabled={loading} className=\"w-100\" type=\"submit\">\r\n                                    Log in\r\n                                </Button>\r\n                            </Form>\r\n                        </Card.Body>\r\n                    </Card>\r\n                    <div className=\"w-100 text-center mt-2\">\r\n                        <Link to=\"/forgotpassword\">Forgot Password?</Link>\r\n                    </div>\r\n                    <div className=\"w-100 text-center mt-2\">\r\n                        Need an account? <Link to=\"/signup\">Sign up</Link>\r\n                    </div>\r\n                </div>\r\n                \r\n            </Container>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Forms\\Signup.js",["94"],"import React, { useRef, useState} from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { Card, Form, Button, Alert, Container } from 'react-bootstrap'\r\n//this is our way to use our context that we created in AuthContext\r\nimport { useAuth } from '../../contexts/AuthContext'\r\n\r\n\r\nfunction Signup() {\r\n    const nameRef = useRef()\r\n    const emailRef = useRef()\r\n    const passwordRef = useRef()\r\n    const passwordConfirmRef = useRef()\r\n    const { signup, currentUser } = useAuth()\r\n    const [error, setError] = useState('')\r\n    const [select, setSelect] = useState(\"Trainer's Client\")\r\n    const [loading, setLoading] = useState(false)\r\n    const history = useHistory()\r\n\r\n    //this is an async function - had to check passwords and get back to us\r\n    async function handleSubmit(e) {\r\n        e.preventDefault()\r\n        \r\n        if (passwordRef.current.value !== passwordConfirmRef.current.value) {\r\n            //we return here because we want to immediately exit the function and not keep going\r\n            //if there is an error\r\n            return setError('Passwords do not match')\r\n        }\r\n\r\n        //if its successful it will - set error to empty and set a loading state which will\r\n        //disable the submit button so users dont keep clicking and signing up\r\n        try {\r\n            setError('')\r\n            setLoading(true)\r\n            await signup(nameRef.current.value, emailRef.current.value, passwordRef.current.value, select)\r\n            history.push('/')\r\n        } catch {\r\n            setError('Failed to create an account')\r\n        }\r\n        //after everything is done, setloading back to false - this is done after it is done\r\n        //awaiting the signup function\r\n        setLoading(false)\r\n    } \r\n\r\n    function handleSelect(select) {\r\n        setSelect(select)\r\n        \r\n    }\r\n\r\n    //if we are currently loading, dont want to be able to resubmit form!\r\n    return (\r\n        <>\r\n            <Container\r\n                className=\"d-flex align-items-center justify-content-center\"\r\n                style={{ minHeight: \"100vh\" }}\r\n            >   \r\n                <div className=\"w-100\" style={{ maxWidth: \"400px\" }}>\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <h2 className=\"text-center mb-4\">Sign Up</h2>\r\n                            {error && <Alert variant=\"danger\">{error}</Alert>}\r\n                            <Form onSubmit={handleSubmit}>\r\n                                <h6 style={{ fontWeight: \"400\" }}>Are you:</h6>\r\n                                <Form.Control \r\n                                    onChange={(e) => handleSelect(e.target.value)} \r\n                                    id=\"select\" \r\n                                    size=\"sm\" \r\n                                    as=\"select\"\r\n                                >\r\n                                    <option>Trainer's Client</option>\r\n                                    <option>Trainer</option>\r\n                                </Form.Control>\r\n                                <br />\r\n                                <Form.Group id=\"name\">\r\n                                    <Form.Label>Name</Form.Label>\r\n                                    <Form.Control type=\"text\" ref={nameRef} required />\r\n                                </Form.Group>\r\n                                <Form.Group id=\"email\">\r\n                                    <Form.Label>Email</Form.Label>\r\n                                    <Form.Control type=\"email\" ref={emailRef} required />\r\n                                </Form.Group>\r\n                                <Form.Group id=\"password\">\r\n                                    <Form.Label>Password</Form.Label>\r\n                                    <Form.Control type=\"password\" ref={passwordRef} required />\r\n                                </Form.Group>\r\n                                <Form.Group id=\"password-confirm\">\r\n                                    <Form.Label>Confirm Password</Form.Label>\r\n                                    <Form.Control type=\"password\" ref={passwordConfirmRef} required />\r\n                                </Form.Group>\r\n                                <Button disabled={loading} className=\"w-100\" type=\"submit\">\r\n                                    Sign Up\r\n                                </Button>\r\n                            </Form>\r\n                        </Card.Body>\r\n                    </Card>\r\n                    <div className=\"w-100 text-center mt-2\">\r\n                        Already have an account? <Link to=\"/login\">Log In</Link>\r\n                    </div>\r\n                </div>\r\n                \r\n            </Container>\r\n            \r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Signup\r\n","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\contexts\\AuthContext.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\firebase.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Dashboard\\Dashboard.js",["95"],"import React, { useState } from 'react';\r\nimport { Link, useHistory } from \"react-router-dom\"\r\nimport { Container, Card, Button, Alert } from 'react-bootstrap';\r\nimport { useAuth } from '../../contexts/AuthContext'\r\nimport { db } from '../../firebase';\r\n\r\nfunction Dashboard() {\r\n    const [error, setError] = useState(\"\")\r\n    const [userType, setUserType] = useState(\"\")\r\n    const { currentUser, logout } = useAuth()\r\n    const history = useHistory()\r\n\r\n    async function getUserType(currentUser) {\r\n        //reference our doc\r\n        const trainerRef = await db.collection('trainers').doc(currentUser.uid).get();\r\n        //open our doc and read, doesnt assign trainer a value until the promise is returned\r\n        const trainer = await trainerRef.data();\r\n        \r\n\r\n        const clientRef = await db.collection('users').doc(currentUser.uid).get();\r\n        const client = clientRef.data();\r\n        \r\n        if (trainer && trainer.userType === \"Trainer\") {\r\n           setUserType(\"Trainer\")\r\n        } else {\r\n            setUserType(\"Client\")\r\n        }\r\n\r\n        // if (client && client.userType === \"Client\") {\r\n        //     setUserType(\"Client\") \r\n        // }\r\n    }\r\n\r\n    getUserType(currentUser)\r\n    \r\n\r\n    async function handleLogout() {\r\n        setError('')\r\n\r\n        try {\r\n            await logout()\r\n            history.push('/login')\r\n        } catch {\r\n            setError('Failed to logo out')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container\r\n                className=\"d-flex align-items-center justify-content-center\"\r\n                style={{ minHeight: \"100vh\" }}\r\n            >\r\n                <div className=\"w-100\" style={{ maxWidth: \"400px\" }}>\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <h2 className=\"text-center mb-4\">Profile</h2>\r\n                            {error && <Alert variant=\"danger\">{error}</Alert>}\r\n                            <strong>User Type: </strong> {(userType === \"Trainer\" ? 'Trainer' : 'Client')}\r\n                            <br />\r\n                            <strong>Name:</strong> {currentUser.displayName}\r\n                            <br />\r\n                            <strong>Email:</strong> {currentUser.email}\r\n                            <Link to=\"/update-profile\" className=\"btn btn-primary w-100 mt-3\">Update Profile</Link>\r\n                        </Card.Body>\r\n                    </Card>\r\n                        <div className=\"w-100 text-center mt-2\">\r\n                            <Button variant=\"link\" onClick={handleLogout}>\r\n                                Log Out\r\n                            </Button>\r\n                        </div>\r\n                </div>\r\n            </Container>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Dashboard\r\n","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Routes\\PrivateRoutes.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Forms\\ForgotPassword.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Profile\\UpdateProfile.js",["96","97"],"import React, { useRef, useState, useContext } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { Card, Form, Button, Alert, Container } from 'react-bootstrap'\r\n//this is our way to use our context that we created in AuthContext\r\nimport { useAuth } from '../../contexts/AuthContext'\r\nimport { auth } from '../../firebase';\r\n\r\nfunction UpdateProfile() {\r\n    const nameRef = useRef()\r\n    const [name, setName] = useState('')\r\n    const emailRef = useRef();\r\n    const passwordRef = useRef();\r\n    const passwordConfirmRef = useRef();\r\n    const { currentUser, updateEmail, updatePassword } = useAuth();\r\n    const [error, setError] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const history = useHistory();\r\n\r\n    //this is an async function - had to check passwords and get back to us\r\n    function handleSubmit(e) {\r\n        const user = auth.currentUser\r\n\r\n        \r\n        e.preventDefault()\r\n\r\n        if (passwordRef.current.value !== passwordConfirmRef.current.value) {\r\n            //we return here because we want to immediately exit the function and not keep going\r\n            //if there is an error\r\n            return setError('Passwords do not match')\r\n        }\r\n\r\n        const promises = []\r\n        setLoading(true)\r\n        setError(\"\")\r\n\r\n        //name change works but doesnt rerender correctly in header when changed\r\n        //needs to be fixed\r\n        if(nameRef.current.value !== currentUser.displayName) {\r\n            user.updateProfile({\r\n                displayName: nameRef.current.value\r\n            }).then(() => {\r\n                setName(nameRef.current.value)\r\n                console.log('Name changed');\r\n            }).catch(()=>{\r\n                console.error('Name change failed')\r\n            })\r\n        }     \r\n\r\n        //if updated email doesnt equal current email, then call updateemail function and pass it the new updated email\r\n        if (emailRef.current.value !== currentUser.email) {\r\n            promises.push(updateEmail(emailRef.current.value))\r\n        }\r\n\r\n        if(passwordRef.current.value) {\r\n            promises.push(updatePassword(passwordRef.current.value))\r\n        }   \r\n\r\n        //As soon as all of our above promises finish, we run a .then if they are all successful\r\n        //takes in our array of promises\r\n        Promise.all(promises).then(() => {\r\n            history.push('/')\r\n        }).catch(() => {\r\n            setError('Failed to update account')\r\n        }).finally(() => {\r\n            setLoading(false)\r\n        })\r\n\r\n        //if its successful it will - set error to empty and set a loading state which will\r\n        //disable the submit button so users dont keep clicking and signing up\r\n    \r\n    } \r\n\r\n    //if we are currently loading, dont want to be able to resubmit form!\r\n    return (\r\n        <>\r\n            <Container\r\n                className=\"d-flex align-items-center justify-content-center\"\r\n                style={{ minHeight: \"100vh\" }}\r\n            >   \r\n                <div className=\"w-100\" style={{ maxWidth: \"400px\" }}>\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <h2 className=\"text-center mb-4\">Update Profile</h2>\r\n                            {error && <Alert variant=\"danger\">{error}</Alert>}\r\n                            <Form onSubmit={handleSubmit}>\r\n                            <Form.Group id=\"name\">\r\n                                    <Form.Label>Full Name</Form.Label>\r\n                                    <Form.Control \r\n                                        type=\"text\" \r\n                                        ref={nameRef} \r\n                                        placeholder=\"Make this functional\"\r\n                                        required defaultValue={currentUser.displayName}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group id=\"email\">\r\n                                    <Form.Label>Email</Form.Label>\r\n                                    <Form.Control \r\n                                        type=\"email\" \r\n                                        ref={emailRef} \r\n                                        required defaultValue={currentUser.email} \r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group id=\"password\">\r\n                                    <Form.Label>Password</Form.Label>\r\n                                    <Form.Control \r\n                                        type=\"password\" \r\n                                        ref={passwordRef} \r\n                                        placeholder=\"Leave blank to keep the same\" \r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group id=\"password-confirm\">\r\n                                    <Form.Label>Confirm Password</Form.Label>\r\n                                    <Form.Control \r\n                                        type=\"password\" \r\n                                        ref={passwordConfirmRef} \r\n                                        placeholder=\"Leave blank to keep the same\"\r\n                                    />\r\n                                </Form.Group>\r\n                                <Button disabled={loading} className=\"w-100\" type=\"submit\">\r\n                                    Update\r\n                                </Button>\r\n                            </Form>\r\n                        </Card.Body>\r\n                    </Card>\r\n                    <div className=\"w-100 text-center mt-2\">\r\n                        <Link to=\"/\">Cancel</Link>\r\n                    </div>\r\n                </div>\r\n                \r\n            </Container>\r\n            \r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default UpdateProfile\r\n","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Forms\\ClientList.js",["98","99","100"],"import React, { useEffect, useRef, useState } from 'react'\r\nimport { Container, Button, Row, Col, Form } from 'react-bootstrap'\r\nimport { db } from '../../firebase'\r\nimport { useAuth } from '../../contexts/AuthContext'\r\nimport RenderEachExercise from '../Days/RenderEachExercise'\r\nimport RenderEachClient from '../Days/RenderEachClient'\r\n\r\nfunction ClientList() {\r\n    const [loading, setLoading] = useState(false)\r\n    const nameRef = useRef()\r\n    const emailRef = useRef()\r\n    const { currentUser: { uid } } = useAuth()\r\n    const [clientList, setClientList] = useState([])\r\n\r\n    async function handleSubmit(e) {\r\n        e.preventDefault()\r\n        setLoading(true)\r\n\r\n        await \r\n            db\r\n            .collection('trainers')\r\n            .doc(uid)\r\n            .collection('trainer-clients')\r\n            .doc(emailRef.current.value)\r\n            .set({\r\n                name: nameRef.current.value,\r\n                email: emailRef.current.value\r\n            }).then(() => {\r\n                console.log('Added new client');\r\n            }).catch(() => {\r\n                console.log('Client failed to add')\r\n            })\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        function getClients() {\r\n            db\r\n            .collection('trainers')\r\n            .doc(uid)\r\n            .collection('trainer-clients')\r\n            .onSnapshot(handleSnapshot)\r\n        }\r\n\r\n        getClients()\r\n        console.log(clientList);\r\n    }, [])\r\n\r\n    \r\n\r\n    function handleSnapshot(snapshot) {\r\n        const clientList = snapshot.docs.map((client) => {\r\n            console.log(client.id);\r\n            return { id: client.id, ...client.data() }\r\n        })\r\n\r\n        setClientList(clientList)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                \r\n            </div>\r\n            <Container\r\n                className=\"d-flex justify-content-center align-items-center mt-3\"\r\n                style={{ minHeight: \"75vh\" }}\r\n            >\r\n                <Row className=\"text-center\">\r\n                <Col className=\"d-flex flex-column align-items-center\" xs={12} sm={6}>\r\n                        <h3>New client?</h3>\r\n                        <Form onSubmit={handleSubmit}>\r\n                            <Form.Group id=\"name\">\r\n                                <Form.Label>Name</Form.Label>\r\n                                <Form.Control type=\"text\" ref={nameRef} required />\r\n                            </Form.Group>\r\n                            <Form.Group id=\"email\">\r\n                                <Form.Label>Email</Form.Label>\r\n                                <Form.Control type=\"email\" ref={emailRef} required />\r\n                            </Form.Group>\r\n                            <Button type=\"submit\">Add to list</Button>\r\n                        </Form>\r\n                    </Col>\r\n                    <Col className=\"d-flex flex-column align-items-center mt-3\" xs={12} sm={6}>\r\n                        {clientList.map((client) => (\r\n                            <RenderEachClient key={client.id} client={client} />\r\n                        ))}\r\n                        <Button className=\"w-50 mt-5\">View Workouts</Button>\r\n                    </Col>\r\n                </Row>\r\n                \r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ClientList\r\n","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Days\\RenderEachClient.js",["101","102","103","104"],{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":1,"column":27,"nodeType":"111","messageId":"112","endLine":1,"endColumn":36},{"ruleId":"105","replacedBy":"113"},{"ruleId":"107","replacedBy":"114"},{"ruleId":"109","severity":1,"message":"115","line":11,"column":12,"nodeType":"111","messageId":"112","endLine":11,"endColumn":19},{"ruleId":"109","severity":1,"message":"116","line":1,"column":35,"nodeType":"111","messageId":"112","endLine":1,"endColumn":45},{"ruleId":"109","severity":1,"message":"117","line":13,"column":21,"nodeType":"111","messageId":"112","endLine":13,"endColumn":32},{"ruleId":"109","severity":1,"message":"118","line":21,"column":15,"nodeType":"111","messageId":"112","endLine":21,"endColumn":21},{"ruleId":"109","severity":1,"message":"116","line":1,"column":35,"nodeType":"111","messageId":"112","endLine":1,"endColumn":45},{"ruleId":"109","severity":1,"message":"119","line":10,"column":12,"nodeType":"111","messageId":"112","endLine":10,"endColumn":16},{"ruleId":"109","severity":1,"message":"120","line":5,"column":8,"nodeType":"111","messageId":"112","endLine":5,"endColumn":26},{"ruleId":"109","severity":1,"message":"115","line":9,"column":12,"nodeType":"111","messageId":"112","endLine":9,"endColumn":19},{"ruleId":"121","severity":1,"message":"122","line":47,"column":8,"nodeType":"123","endLine":47,"endColumn":10,"suggestions":"124"},{"ruleId":"109","severity":1,"message":"125","line":5,"column":21,"nodeType":"111","messageId":"112","endLine":5,"endColumn":25},{"ruleId":"109","severity":1,"message":"126","line":5,"column":46,"nodeType":"111","messageId":"112","endLine":5,"endColumn":49},{"ruleId":"109","severity":1,"message":"127","line":5,"column":51,"nodeType":"111","messageId":"112","endLine":5,"endColumn":54},{"ruleId":"109","severity":1,"message":"128","line":11,"column":11,"nodeType":"111","messageId":"112","endLine":11,"endColumn":15},"no-native-reassign",["129"],"no-negated-in-lhs",["130"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar",["129"],["130"],"'loading' is assigned a value but never used.","'useContext' is defined but never used.","'currentUser' is assigned a value but never used.","'client' is assigned a value but never used.","'name' is assigned a value but never used.","'RenderEachExercise' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'clientList' and 'uid'. Either include them or remove the dependency array.","ArrayExpression",["131"],"'Card' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'date' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"132","fix":"133"},"Update the dependencies array to be: [clientList, uid]",{"range":"134","text":"135"},[1448,1450],"[clientList, uid]"]