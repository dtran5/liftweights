[{"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\index.js":"1","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\App.js":"2","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Navigation\\MainNavigation.js":"3","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Navigation\\NavigationLinks.js":"4","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Calendar\\Calendar.js":"5","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Forms\\RecordWorkout.js":"6","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Forms\\Login.js":"7","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Forms\\Signup.js":"8","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\contexts\\AuthContext.js":"9","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\firebase.js":"10","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Dashboard\\Dashboard.js":"11","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Routes\\PrivateRoutes.js":"12","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Forms\\ForgotPassword.js":"13","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Profile\\UpdateProfile.js":"14","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\Clients\\GetClientWorkout.js":"15","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\Clients\\RenderClientWorkout.js":"16","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\Trainers\\RenderTrainerClients.js":"17","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\Trainers\\RenderTrainerClientWorkout.js":"18","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Calendar\\RenderCalendar.js":"19","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\clients\\GetClientWorkout.js":"20","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\clients\\RenderClientWorkout.js":"21","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\trainers\\RenderTrainerClients.js":"22","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\trainers\\GetClientList.js":"23","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\trainers\\RenderTrainerClientWorkout.js":"24"},{"size":196,"mtime":1614222000728,"results":"25","hashOfConfig":"26"},{"size":2048,"mtime":1614293696395,"results":"27","hashOfConfig":"26"},{"size":730,"mtime":1614133774216,"results":"28","hashOfConfig":"26"},{"size":1836,"mtime":1614277019418,"results":"29","hashOfConfig":"26"},{"size":7867,"mtime":1614218733751,"results":"30","hashOfConfig":"26"},{"size":5964,"mtime":1614293923871,"results":"31","hashOfConfig":"26"},{"size":3222,"mtime":1614123437690,"results":"32","hashOfConfig":"26"},{"size":5586,"mtime":1614293764947,"results":"33","hashOfConfig":"26"},{"size":8037,"mtime":1614213006173,"results":"34","hashOfConfig":"26"},{"size":673,"mtime":1612918083211,"results":"35","hashOfConfig":"26"},{"size":1967,"mtime":1614224178812,"results":"36","hashOfConfig":"26"},{"size":1021,"mtime":1612385138794,"results":"37","hashOfConfig":"26"},{"size":3041,"mtime":1614293756007,"results":"38","hashOfConfig":"26"},{"size":5912,"mtime":1613781561054,"results":"39","hashOfConfig":"26"},{"size":2277,"mtime":1614293361373,"results":"40","hashOfConfig":"26"},{"size":513,"mtime":1614293024957,"results":"41","hashOfConfig":"26"},{"size":1378,"mtime":1614293807979,"results":"42","hashOfConfig":"26"},{"size":1500,"mtime":1614293897062,"results":"43","hashOfConfig":"26"},{"size":339,"mtime":1614293725915,"results":"44","hashOfConfig":"26"},{"size":2277,"mtime":1614293361373,"results":"45","hashOfConfig":"26"},{"size":513,"mtime":1614293024957,"results":"46","hashOfConfig":"26"},{"size":1378,"mtime":1614293807979,"results":"47","hashOfConfig":"26"},{"size":3207,"mtime":1614293836114,"results":"48","hashOfConfig":"26"},{"size":1500,"mtime":1614293897062,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"ov5d02",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\index.js",[],["104","105"],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\App.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Navigation\\MainNavigation.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Navigation\\NavigationLinks.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Calendar\\Calendar.js",[],["106","107"],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Forms\\RecordWorkout.js",["108"],"import React, { useState, useRef, useEffect } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { Form, Button, Table, Container } from 'react-bootstrap';\r\nimport { db } from '../../firebase';\r\nimport { useAuth } from '../../contexts/AuthContext'\r\nimport RenderTrainerClientWorkout from '../../trainers/RenderTrainerClientWorkout';\r\n\r\nconst RecordWorkout = () => {\r\n    \r\n    const emailOfClient = useParams().email\r\n    // const [clientTrainerEmail, setClientTrainerEmail] = useState('')\r\n    const [exerciseList, setExerciseList] = useState([])\r\n    //grab the date from URL and use it as document name in database\r\n    const date = useParams().date;\r\n    //grab unique id created from database authentication\r\n    const { currentUser: { uid, email }, trainerTypeState }  = useAuth()\r\n    const nameRef = useRef();\r\n    const setsRef = useRef()\r\n    const repsRef = useRef()\r\n    const weightRef = useRef()\r\n    \r\n    async function handleSubmit (e) {\r\n        e.preventDefault()\r\n        //MAKE THIS EMAIL OF THE CLIENT\r\n        //REWORK THIS DB TO FIT YOUR STRUCTURE\r\n        //REMOVE CLIENT ABILITY TO CREATE WORKOUT\r\n        //SET AN EMAIL VERIFICATION FOR CLIENT (IF CLIENT.EMAIL MATCHES EMAIL OF THE DOCUMENT, ALLOW VIEWING OF DOCUMENT)\r\n        //Sets trainer's currently worked on client's email to each date so it can be verified later\r\n        await \r\n        db.collection(\"trainers\")\r\n            .doc(email)\r\n            .collection(\"trainer-clients\")\r\n            .doc(emailOfClient)\r\n            .collection(\"dates\")\r\n            .doc(date)\r\n            .collection(\"exercise-details\")\r\n            .doc()\r\n            .set({\r\n                name: nameRef.current.value,\r\n                sets: setsRef.current.value,\r\n                reps: repsRef.current.value,\r\n                weight: weightRef.current.value,\r\n                //email is passed as a verification check when client tries to grab data\r\n                email: emailOfClient\r\n            }).then(()=>{\r\n                console.log('worked');\r\n                \r\n            }).catch(()=>{\r\n                console.log('did not work');\r\n            })\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        function getExerciseDetails() {\r\n            db.collection(\"trainers\")\r\n                .doc(email)\r\n                .collection(\"trainer-clients\")\r\n                .doc(emailOfClient)\r\n                .collection(\"dates\")\r\n                .doc(date)\r\n                .collection(\"exercise-details\")\r\n                .onSnapshot(handleTrainerSnapshot)\r\n        }\r\n\r\n        getExerciseDetails()\r\n\r\n    }, [date, uid, emailOfClient, email])\r\n\r\n    //onSnapshot is an active listener that listens for changes to the collection so when user adds new exercise, it is immediately fetched and displayed\r\n    //onSnapshot returns a callback for us to work on given documents\r\n    \r\n\r\n    //within the callback that onSnapshot provides, we are passed a snapshot of our data. It contains the documents in the collection. map through our docs array to return our data\r\n    //exercise.id grabs the id of the document of the individual exercise and then exercise.data() opens the document and retrieves its contents\r\n    function handleTrainerSnapshot(snapshot) {\r\n        const exerciseList = snapshot.docs.map((exercise) => {\r\n            return { id: exercise.id, ...exercise.data() }\r\n        })\r\n        setExerciseList(exerciseList)\r\n    }\r\n    \r\n    return (\r\n        <>\r\n          <Link to={`/client/${emailOfClient}`}>Back</Link>\r\n            <Container className=\"d-flex justify-content-center align-items-center\">\r\n                <Form onSubmit={handleSubmit} className=\"container mt-5 w-50 mr-5\">\r\n                    <Form.Group controlId=\"exercise\">\r\n                        <Form.Label>Exercise</Form.Label>\r\n                        <Form.Control ref={nameRef} type=\"text\" placeholder=\"Exercise Name\" />\r\n                        <Form.Text className=\"text-muted\">\r\n                        \r\n                        </Form.Text>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"sets\">\r\n                        <Form.Label>Sets</Form.Label>\r\n                        <Form.Control ref={setsRef} type=\"text\" placeholder=\"How many sets?\" />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"reps\">\r\n                        <Form.Label>Reps</Form.Label>\r\n                        <Form.Control ref={repsRef} type=\"text\" placeholder=\"How many reps per set?\" />\r\n                        <Form.Text className=\"text-muted\">\r\n                        \r\n                        </Form.Text>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"weight\">\r\n                        <Form.Label>Weight</Form.Label>\r\n                        <Form.Control ref={weightRef} type=\"text\" placeholder=\"Suggested starting weight\" />\r\n                        <Form.Text className=\"text-muted\">\r\n                        \r\n                        </Form.Text>\r\n                    </Form.Group>\r\n                    <Button variant=\"primary\" type=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form>\r\n                <Table striped bordered hover className=\"w-50\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Exercise</th>\r\n                            <th>Sets</th>\r\n                            <th>Reps</th>\r\n                            <th>Weight</th>\r\n                            <th>Delete</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {exerciseList.map((exercise) => (\r\n                        <RenderTrainerClientWorkout key={exercise.id} exercise={exercise} /> \r\n                        ))}\r\n                    </tbody>\r\n                </Table>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RecordWorkout","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Forms\\Login.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Forms\\Signup.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\contexts\\AuthContext.js",["109"],"import React, { useContext, useState, useEffect } from 'react';\r\n//imports the auth module we just created in our firebase.js file\r\nimport { auth, db } from '../firebase'\r\n\r\n//creates a context object with name AuthContext\r\n//use this context inside of provider\r\nconst AuthContext = React.createContext()\r\n\r\n//this function allows us to use this context\r\nexport function useAuth() {\r\n    //This functions returns our useContext hook which takes in the Context object\r\n    //we created that we want to make use of. //This returns us the value that we passed in\r\n    //down at the provider - THE VALUE OBJECT!\r\n    return useContext(AuthContext)\r\n}\r\n\r\n//children props comes from context\r\nexport function AuthProvider({ children }) {\r\n    //our state for current user, by default we have no user\r\n    const[currentUser, setCurrentUser] = useState()\r\n    const [clientTypeState, setClientTypeState] = useState('')\r\n    const [trainerTypeState, setTrainerTypeState] = useState('')\r\n    const [clientTrainerEmailState, setClientTrainerEmailState] = useState('')\r\n    //initially we are loading and as soon as we get that first useEffect thats runs, it means\r\n    //firebase did the verification to see if there was a user\r\n    const [loading, setLoading] = useState(true)\r\n    const [uid, setUid] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    // const [trainerType, setTrainerType] = useState('')\r\n    // const [clientType, setClientType] = useState('')\r\n\r\n    //function uses our auth module (firebase) to signup a user\r\n    //this method comes from firebase\r\n    //returns a promise\r\n    //whenever we call createUserWithEmailAndPassword it calls setCurrentUser and\r\n    //sets the user for us within onAuthStateChanged\r\n    //firebase creates the local storage for us as well as tokens - FIND THIS IN VIDEO\r\n    //gotta make sure we return these functions because they are promises\r\n    async function signup(name, email, password, select, clientTrainer) {\r\n        const newUser = await auth.createUserWithEmailAndPassword(email, password)\r\n\r\n        await newUser.user.updateProfile({\r\n            displayName: name\r\n        })\r\n\r\n        //Gives every user (trainer or client) an email property in auth object\r\n        await newUser.user.updateEmail(email)\r\n        \r\n        await setUid(newUser.user.uid)\r\n        \r\n        \r\n        //creates user or trainer in db and sets the usertype to selected value in dropdown\r\n        //adds clients trainer to their user information\r\n        if (select === \"Trainer\") {\r\n            return await db.collection(\"trainers\").doc(newUser.user.email).set({\r\n                userType: select,\r\n            })\r\n        } else {\r\n            return await db.collection(\"users\").doc(newUser.user.uid).set({\r\n                userType: select,\r\n                clientTrainer: clientTrainer\r\n            })\r\n        }\r\n    }\r\n\r\n    //Goes into firebase, gets the currently logged in user, grabs the userType value and returns it\r\n    //Have to do this because firebase auth doesnt allow for custom claims \r\n    //We run both types because we are unsure of the type at first until it is grabbed and the trycatch block allows us to catch the error without crashing the app\r\n    async function getTrainerType(currentUser) {\r\n        if (currentUser) {\r\n            try {\r\n                const trainerRef = await db.collection('trainers').doc(currentUser.email).get();\r\n                const trainerType = await trainerRef.data().userType\r\n                return trainerType\r\n            } catch (error) {\r\n                console.error(error)\r\n            }\r\n        }\r\n    }\r\n    \r\n    async function getClientType(currentUser) {\r\n        if (currentUser) {\r\n            try {\r\n                const clientRef = await db.collection('users').doc(currentUser.uid).get()\r\n                const clientType = await clientRef.data().userType\r\n                \r\n                return clientType\r\n            } catch (error) {\r\n                console.error(error)\r\n            }\r\n        }\r\n    }\r\n    //Refactor this - got weird error infinite loop when tried to add this action into getClientType function\r\n    async function getClientTrainerEmail(currentUser) {\r\n        if (currentUser) {\r\n            try {\r\n                const clientTrainerEmailRef = await db.collection('users').doc(currentUser.uid).get()\r\n                const clientTrainerEmail = await clientTrainerEmailRef.data().clientTrainer\r\n                \r\n                return clientTrainerEmail\r\n            } catch (error) {\r\n                console.error(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    //Get client type value from database by calling this function from authcontext, passing in currentuser, and setting componnent state\r\n    getClientType(currentUser).then((clientType) => {\r\n        setClientTypeState(clientType)\r\n    })\r\n    \r\n\r\n    // Get trainer type value from database by calling this function from authcontext, passing in currentuser, and setting componnent state\r\n    getTrainerType(currentUser).then((trainerType) => {\r\n        setTrainerTypeState(trainerType)\r\n    })\r\n\r\n    getClientTrainerEmail(currentUser).then((clientTrainerEmail) => {\r\n        setClientTrainerEmailState(clientTrainerEmail)\r\n    })\r\n\r\n    async function login(email, password) {\r\n        return auth.signInWithEmailAndPassword(email, password)\r\n\r\n    }\r\n\r\n    function logout() {\r\n        return auth.signOut()\r\n    }\r\n\r\n    function resetPassword(email) {\r\n        \r\n\r\n        return auth.sendPasswordResetEmail(email)\r\n    }\r\n\r\n    function updateEmail (email) {\r\n        return currentUser.updateEmail(email)\r\n    }\r\n\r\n    function updatePassword (password) {\r\n        return currentUser.updatePassword(password)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        //onAuthStateChanged is firebase recommended method for getting the\r\n        //current user. We set an observer on the auth object\r\n        //we want onAuthStateChanged to be inside a useEffect and not in our render\r\n        //because we only want this to run when we mount our component (first time it loads)\r\n        //Unsubscribe to avoid memory leaks - when we initialize auth.onAuthStateChanged we\r\n        //create a listener to continue to listen even after we have stopped using it, wasting\r\n        //memory. to prevent we unsubscribe from listener when we unmount app\r\n        //auth.onAuthStateChanged when called, will return a method that when we call unsubscribe\r\n        //it will unsubscribe the onauthostatechanged event\r\n        const unsubscribe = auth.onAuthStateChanged(user => {\r\n            setCurrentUser(user)\r\n            //Whenever auth state actually changes, it means we are done loading\r\n            setLoading(false)\r\n            \r\n            \r\n        })\r\n        //this will unsubscribe us from the onauthstatechanged listener when we unmount the\r\n        //component\r\n        return unsubscribe\r\n    }, [])\r\n    \r\n    //this object is passed to our provider, we want current user\r\n    //also pass signup so we can use anywhere\r\n    const value = {\r\n        clientTrainerEmailState,\r\n        clientTypeState,\r\n        trainerTypeState,\r\n        email,\r\n        uid,\r\n        currentUser,\r\n        getClientType,\r\n        getTrainerType,\r\n        signup,\r\n        login,\r\n        logout,\r\n        resetPassword,\r\n        updateEmail,\r\n        updatePassword\r\n    }\r\n\r\n    //children are the components between our <AuthProvider> Tags in the\r\n    //App.js file!\r\n    //the value returns all of the information that can be accessed from any of our children\r\n    //components - in this case it is our authentication info\r\n    //simple check to see if we are loading because if we are not loading then we render the\r\n    //children otherwise we want to not render the children because we are loading\r\n    //none of our application will render unless we have our user for the first time\r\n    return (\r\n        <AuthContext.Provider value={value}>\r\n            {!loading && children}\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\n\r\n","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\firebase.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Dashboard\\Dashboard.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Routes\\PrivateRoutes.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Forms\\ForgotPassword.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Profile\\UpdateProfile.js",["110"],"import React, { useRef, useState } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { Card, Form, Button, Alert, Container } from 'react-bootstrap'\r\n//this is our way to use our context that we created in AuthContext\r\nimport { useAuth } from '../../contexts/AuthContext'\r\nimport { auth } from '../../firebase';\r\n\r\nfunction UpdateProfile() {\r\n    const nameRef = useRef()\r\n    const [name, setName] = useState('')\r\n    const emailRef = useRef();\r\n    const passwordRef = useRef();\r\n    const passwordConfirmRef = useRef();\r\n    const { currentUser, updateEmail, updatePassword } = useAuth();\r\n    const [error, setError] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const history = useHistory();\r\n\r\n    //this is an async function - had to check passwords and get back to us\r\n    function handleSubmit(e) {\r\n        const user = auth.currentUser\r\n\r\n        \r\n        e.preventDefault()\r\n\r\n        if (passwordRef.current.value !== passwordConfirmRef.current.value) {\r\n            //we return here because we want to immediately exit the function and not keep going\r\n            //if there is an error\r\n            return setError('Passwords do not match')\r\n        }\r\n\r\n        const promises = []\r\n        setLoading(true)\r\n        setError(\"\")\r\n\r\n        //name change works but doesnt rerender correctly in header when changed\r\n        //needs to be fixed\r\n        if(nameRef.current.value !== currentUser.displayName) {\r\n            user.updateProfile({\r\n                displayName: nameRef.current.value\r\n            }).then(() => {\r\n                setName(nameRef.current.value)\r\n                console.log('Name changed');\r\n            }).catch(()=>{\r\n                console.error('Name change failed')\r\n            })\r\n        }     \r\n\r\n        //if updated email doesnt equal current email, then call updateemail function and pass it the new updated email\r\n        if (emailRef.current.value !== currentUser.email) {\r\n            promises.push(updateEmail(emailRef.current.value))\r\n        }\r\n\r\n        if(passwordRef.current.value) {\r\n            promises.push(updatePassword(passwordRef.current.value))\r\n        }   \r\n\r\n        //As soon as all of our above promises finish, we run a .then if they are all successful\r\n        //takes in our array of promises\r\n        Promise.all(promises).then(() => {\r\n            history.push('/')\r\n        }).catch(() => {\r\n            setError('Failed to update account')\r\n        }).finally(() => {\r\n            setLoading(false)\r\n        })\r\n\r\n        //if its successful it will - set error to empty and set a loading state which will\r\n        //disable the submit button so users dont keep clicking and signing up\r\n    \r\n    } \r\n\r\n    //if we are currently loading, dont want to be able to resubmit form!\r\n    return (\r\n        <>\r\n            <Container\r\n                className=\"d-flex align-items-center justify-content-center\"\r\n                style={{ minHeight: \"100vh\" }}\r\n            >   \r\n                <div className=\"w-100\" style={{ maxWidth: \"400px\" }}>\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <h2 className=\"text-center mb-4\">Update Profile</h2>\r\n                            {error && <Alert variant=\"danger\">{error}</Alert>}\r\n                            <Form onSubmit={handleSubmit}>\r\n                            <Form.Group id=\"name\">\r\n                                    <Form.Label>Full Name</Form.Label>\r\n                                    <Form.Control \r\n                                        type=\"text\" \r\n                                        ref={nameRef} \r\n                                        placeholder=\"Make this functional\"\r\n                                        required defaultValue={currentUser.displayName}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group id=\"email\">\r\n                                    <Form.Label>Email</Form.Label>\r\n                                    <Form.Control \r\n                                        type=\"email\" \r\n                                        ref={emailRef} \r\n                                        required defaultValue={currentUser.email} \r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group id=\"password\">\r\n                                    <Form.Label>Password</Form.Label>\r\n                                    <Form.Control \r\n                                        type=\"password\" \r\n                                        ref={passwordRef} \r\n                                        placeholder=\"Leave blank to keep the same\" \r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group id=\"password-confirm\">\r\n                                    <Form.Label>Confirm Password</Form.Label>\r\n                                    <Form.Control \r\n                                        type=\"password\" \r\n                                        ref={passwordConfirmRef} \r\n                                        placeholder=\"Leave blank to keep the same\"\r\n                                    />\r\n                                </Form.Group>\r\n                                <Button disabled={loading} className=\"w-100\" type=\"submit\">\r\n                                    Update\r\n                                </Button>\r\n                            </Form>\r\n                        </Card.Body>\r\n                    </Card>\r\n                    <div className=\"w-100 text-center mt-2\">\r\n                        <Link to=\"/\">Cancel</Link>\r\n                    </div>\r\n                </div>\r\n                \r\n            </Container>\r\n            \r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default UpdateProfile\r\n","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\Clients\\GetClientWorkout.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\Clients\\RenderClientWorkout.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\Trainers\\RenderTrainerClients.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\Trainers\\RenderTrainerClientWorkout.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\components\\Calendar\\RenderCalendar.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\clients\\GetClientWorkout.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\clients\\RenderClientWorkout.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\trainers\\RenderTrainerClients.js",[],"C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\trainers\\GetClientList.js",["111"],"import React, { useEffect, useRef, useState } from 'react'\r\nimport { Container, Button, Row, Col, Form } from 'react-bootstrap'\r\nimport { db } from '../firebase'\r\nimport { useAuth } from '../contexts/AuthContext'\r\nimport RenderTrainerClients from './RenderTrainerClients'\r\n\r\nfunction GetClientList() {\r\n    const [loading, setLoading] = useState(false)\r\n    const nameRef = useRef()\r\n    const emailRef = useRef()\r\n    const { currentUser: { uid } } = useAuth()\r\n    const [clientList, setClientList] = useState([])\r\n\r\n    async function handleSubmit(e) {\r\n        e.preventDefault()\r\n        setLoading(true)\r\n\r\n        await \r\n            db\r\n            .collection('trainers')\r\n            .doc(uid)\r\n            .collection('trainer-clients')\r\n            .doc(emailRef.current.value)\r\n            .set({\r\n                name: nameRef.current.value,\r\n                email: emailRef.current.value\r\n            }).then(() => {\r\n                console.log('Added new client');\r\n            }).catch(() => {\r\n                console.log('Client failed to add')\r\n            })\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        function getClients() {\r\n            db\r\n            .collection('trainers')\r\n            .doc(uid)\r\n            .collection('trainer-clients')\r\n            .onSnapshot(handleSnapshot)\r\n        }\r\n\r\n        getClients()\r\n    }, [clientList, uid])\r\n\r\n    \r\n\r\n    function handleSnapshot(snapshot) {\r\n        const clientList = snapshot.docs.map((client) => {\r\n            return { id: client.id, ...client.data() }\r\n        })\r\n\r\n        setClientList(clientList)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                \r\n            </div>\r\n            <Container\r\n                className=\"d-flex justify-content-center align-items-center mt-3\"\r\n                style={{ minHeight: \"75vh\" }}\r\n            >\r\n                <Row className=\"text-center\">\r\n                <Col className=\"d-flex flex-column align-items-center\" xs={12} sm={6}>\r\n                        <h3>New client?</h3>\r\n                        <Form onSubmit={handleSubmit}>\r\n                            <Form.Group id=\"name\">\r\n                                <Form.Label>Name</Form.Label>\r\n                                <Form.Control type=\"text\" ref={nameRef} required />\r\n                            </Form.Group>\r\n                            <Form.Group id=\"email\">\r\n                                <Form.Label>Email</Form.Label>\r\n                                <Form.Control type=\"email\" ref={emailRef} required />\r\n                            </Form.Group>\r\n                            <Button type=\"submit\">Add to list</Button>\r\n                        </Form>\r\n                    </Col>\r\n                    <Col className=\"d-flex flex-column align-items-center mt-3\" xs={12} sm={6}>\r\n                        {clientList.map((client) => (\r\n                            <RenderTrainerClients key={client.id} client={client} />\r\n                        ))}\r\n                        <Button className=\"w-50 mt-5\">View Workouts</Button>\r\n                    </Col>\r\n                </Row>\r\n                \r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GetClientList\r\n","C:\\Users\\dantr\\Documents\\Programming\\liftweights\\src\\trainers\\RenderTrainerClientWorkout.js",[],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"112","replacedBy":"116"},{"ruleId":"114","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":16,"column":42,"nodeType":"120","messageId":"121","endLine":16,"endColumn":58},{"ruleId":"118","severity":1,"message":"122","line":28,"column":19,"nodeType":"120","messageId":"121","endLine":28,"endColumn":27},{"ruleId":"118","severity":1,"message":"123","line":10,"column":12,"nodeType":"120","messageId":"121","endLine":10,"endColumn":16},{"ruleId":"118","severity":1,"message":"124","line":8,"column":12,"nodeType":"120","messageId":"121","endLine":8,"endColumn":19},"no-native-reassign",["125"],"no-negated-in-lhs",["126"],["125"],["126"],"no-unused-vars","'trainerTypeState' is assigned a value but never used.","Identifier","unusedVar","'setEmail' is assigned a value but never used.","'name' is assigned a value but never used.","'loading' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]